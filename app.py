import os
import requests
import streamlit as st
import textwrap
from datetime import datetime
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, ListFlowable, ListItem
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch

# --- Streamlit Setup ---
st.set_page_config(page_title="Insights Gulfstore Agents", page_icon="ðŸ› ", layout="wide")
st.title("Insights Gulfstore â€“ Content, Analysis & Social Media Agent")

# --- API Config ---
API_KEY = "AIzaSyANPss2F2gmAfNomMyVrFbONmbQE1G01aU"  # replace with your Gemini API key
MODEL = "gemini-2.0-flash"
API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/{MODEL}:generateContent?key={API_KEY}"

# --- API Helper ---
def generate_response(prompt):
    headers = {"Content-Type": "application/json"}
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        if response.status_code == 200:
            data = response.json()
            return data["candidates"][0]["content"]["parts"][0]["text"]
        else:
            return f"API Error: {response.status_code} - {response.text}"
    except Exception as e:
        return f"Request failed: {e}"

# --- Styled PDF Generator ---
def create_full_pdf(content_text, analysis_text, social_text, filename="final_report.pdf"):
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name="CenteredTitle", alignment=TA_CENTER, fontSize=20, spaceAfter=20))
    styles.add(ParagraphStyle(name="SectionHeader", fontSize=14, spaceAfter=12, leading=16, spaceBefore=12))

    doc = SimpleDocTemplate(filename, pagesize=A4)
    elements = []

    # --- Cover Page ---
    elements.append(Spacer(1, 2 * inch))
    elements.append(Paragraph("Insights Gulfstore â€“ Agent Report", styles["CenteredTitle"]))
    elements.append(Spacer(1, 0.5 * inch))
    elements.append(Paragraph("Generated by Multi-Agent System", styles["Title"]))
    elements.append(Spacer(1, 0.3 * inch))
    elements.append(Paragraph(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}", styles["Normal"]))
    elements.append(PageBreak())

    # --- Section 1: Content ---
    if content_text:
        elements.append(Paragraph("Generated Content", styles["SectionHeader"]))
        for line in content_text.split("\n"):
            if line.strip():
                elements.append(Paragraph(line.strip(), styles["Normal"]))
        elements.append(PageBreak())

    # --- Section 2: Analysis ---
    if analysis_text:
        elements.append(Paragraph(" Analysis Output", styles["SectionHeader"]))
        for line in analysis_text.split("\n"):
            if line.strip().startswith(("1)", "2)", "3)", "4)", "5)", "6)")):
                elements.append(ListFlowable([ListItem(Paragraph(line.strip(), styles["Normal"]))], bulletType="bullet"))
            elif line.strip():
                elements.append(Paragraph(line.strip(), styles["Normal"]))
        elements.append(PageBreak())

    # --- Section 3: Social Media ---
    if social_text:
        elements.append(Paragraph(" Social Media Posts", styles["SectionHeader"]))
        for line in social_text.split("\n"):
            if line.strip():
                elements.append(Paragraph(line.strip(), styles["Normal"]))

    doc.build(elements)
    return filename

# --- Tabs ---
tab1, tab2, tab3, tab4 = st.tabs([
    " Content Creation Agent",
    " Analyze Content Performance",
    " Combined Report",
    " Social Media Agent"
])

# ------------------ TAB 1: CONTENT CREATION ------------------ #
with tab1:
    st.header(" Content Creation Agent")

    topic = st.text_input("Enter topic or product name")
    content_type = st.selectbox("Select Content Type", ["Blog Post", "Product Description"])
    word_count = st.slider("Word Count", 100, 1000, 300)

    if st.button("Generate Content"):
        with st.spinner("Generating content..."):
            prompt = f"""
            Generate a {content_type} of about {word_count} words for Insights Gulfstore. 
            Topic: {topic}. Use SEO-friendly style.
            Rules:
            - Do not explain optimization.
            - At the end include an optimization score /100.
            - Must be relevant to www.insightsgulfstore.com
            """
            content_output = generate_response(prompt)
            st.session_state["generated_content"] = content_output

        st.subheader(" Generated Content")
        st.write(content_output)
        st.download_button("â¬‡ Download Content", content_output, file_name="generated_content.txt")

# ------------------ TAB 2: ANALYSIS ------------------ #
with tab2:
    st.header(" Analyze Content Performance")

    modes = [
        "Audit Current Analytics Setup",
        "Define & Prioritize KPIs",
        "Design Dashboards",
        "Analyze Performance Trends",
        "Decision Support Recommendations",
        "Best Practices Checklist",
        "Full Plan (All Sections)"
    ]
    mode = st.selectbox(" Select Analysis Mode", modes)

    use_generated = False
    if "generated_content" in st.session_state and st.session_state["generated_content"]:
        use_generated = st.radio(
            "Select Analysis Type",
            ["Use Generated Content from Tab 1", "Website-Level Analysis"],
            horizontal=True
        ) == "Use Generated Content from Tab 1"

    if st.button(" Run Analysis"):
        with st.spinner("Analyzing content performance..."):
            points = textwrap.dedent("""
            Analytics Framework:
            1) Monitor user behavior â€“ clicks, scroll depth, conversions
            2) Define KPIs â€“ 5â€“7 metrics (bounce rate, ROI, engagement)
            3) Visualization â€“ dashboards and funnels
            4) Trends â€“ seasonality, Gulf holiday sales
            5) Recommendations â€“ ROI-driven
            6) Best practices â€“ privacy, avoid over-tracking
            """).strip()

            if use_generated:
                context = f"Insights Gulfstore â€“ Analyze this generated content: {st.session_state['generated_content']}"
            else:
                context = "Insights Gulfstore â€“ E-commerce website specializing in hard disks and storage devices."

            prompt = f"{points}\n\nMode: {mode}\nContext: {context}\nOutput Format: Plain Text"
            analysis_output = generate_response(prompt)
            st.session_state["analysis_output"] = analysis_output

            st.subheader(" Analysis Result")
            st.write(analysis_output)
            st.download_button("â¬‡ Download Analysis", analysis_output, file_name="analysis_output.txt")

# ------------------ TAB 3: COMBINED REPORT ------------------ #
with tab3:
    st.header(" Combined Report")

    content_text = st.session_state.get("generated_content", "")
    analysis_text = st.session_state.get("analysis_outp_
